// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace CarServ.Domain.Entities;

public partial class CarServicesManagementSystemContext : DbContext
{
    public CarServicesManagementSystemContext()
    {
    }

    public CarServicesManagementSystemContext(DbContextOptions<CarServicesManagementSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointments> Appointments { get; set; }

    public virtual DbSet<Customers> Customers { get; set; }

    public virtual DbSet<Inventory> Inventory { get; set; }

    public virtual DbSet<InventoryManagers> InventoryManagers { get; set; }

    public virtual DbSet<Notifications> Notifications { get; set; }

    public virtual DbSet<PartsUsed> PartsUsed { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<Promotions> Promotions { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<ServiceHistory> ServiceHistory { get; set; }

    public virtual DbSet<ServicePackages> ServicePackages { get; set; }
    public virtual DbSet<PromotionServicePackage> PromotionServicePackages { get; set; }

    public virtual DbSet<ServiceStaff> ServiceStaff { get; set; }

    public virtual DbSet<Suppliers> Suppliers { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<Vehicles> Vehicles { get; set; }

    public virtual DbSet<WarrantyClaims> WarrantyClaims { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointments>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__Appointm__8ECDFCA26EAFDB71");

            entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");
            entity.Property(e => e.AppointmentDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Customer).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Appointme__Custo__4D94879B");

            entity.HasOne(d => d.Package).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.PackageId)
                .HasConstraintName("FK__Appointme__Packa__4F7CD00D");

            entity.HasOne(d => d.Promotion).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.PromotionId)
                .HasConstraintName("FK__Appointme__Promo__5070F446");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK__Appointme__Vehic__4E88ABD4");
        });

        modelBuilder.Entity<Customers>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B8A3853FE0");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithOne(p => p.Customers)
                .HasForeignKey<Customers>(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Customers__Custo__3E52440B");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.PartId).HasName("PK__Inventor__7C3F0D302046D415");

            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.PartName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<InventoryManagers>(entity =>
        {
            entity.HasKey(e => e.ManagerId).HasName("PK__Inventor__3BA2AA81D8C6D423");

            entity.Property(e => e.ManagerId)
                .ValueGeneratedNever()
                .HasColumnName("ManagerID");

            entity.HasOne(d => d.Manager).WithOne(p => p.InventoryManagers)
                .HasForeignKey<InventoryManagers>(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Inventory__Manag__440B1D61");
        });

        modelBuilder.Entity<Notifications>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E3296D7A116");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.Message).HasColumnType("text");
            entity.Property(e => e.SentAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Notificat__UserI__656C112C");
        });

        modelBuilder.Entity<PartsUsed>(entity =>
        {
            entity.HasKey(e => e.UsedId).HasName("PK__PartsUse__0BF8B83108F8972D");

            entity.Property(e => e.UsedId).HasColumnName("UsedID");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

            entity.HasOne(d => d.Part).WithMany(p => p.PartsUsed)
                .HasForeignKey(d => d.PartId)
                .HasConstraintName("FK__PartsUsed__PartI__59FA5E80");

            entity.HasOne(d => d.Service).WithMany(p => p.PartsUsed)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__PartsUsed__Servi__59063A47");
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A5858571BD2");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");
            entity.Property(e => e.PaidAt).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Appointment).WithMany(p => p.Payments)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK__Payments__Appoin__628FA481");
        });

        modelBuilder.Entity<Promotions>(entity =>
        {
            entity.HasKey(e => e.PromotionId).HasName("PK__Promotio__52C42F2FC866448D");

            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE3A3982B354");

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceHistory>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__ServiceH__C51BB0EA2484319A");

            entity.Property(e => e.ServiceId)
                .ValueGeneratedNever()
                .HasColumnName("ServiceID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.LaborHours).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Review).HasColumnType("text");
            entity.Property(e => e.ServiceDate).HasColumnType("datetime");
            entity.Property(e => e.StaffId).HasColumnName("StaffID");

            entity.HasOne(d => d.Service).WithOne(p => p.ServiceHistory)
                .HasForeignKey<ServiceHistory>(d => d.ServiceId)
                .HasConstraintName("FK__ServiceHi__Servi__5441852A");

            entity.HasOne(d => d.Staff).WithMany(p => p.ServiceHistory)
                .HasForeignKey(d => d.StaffId)
                .HasConstraintName("FK__ServiceHi__Staff__534D60F1");
        });

        modelBuilder.Entity<ServicePackages>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("PK__ServiceP__322035ECF525B77C");

            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
        });

        // Configure composite primary key
        modelBuilder.Entity<PromotionServicePackage>()
            .HasKey(psp => new { psp.PromotionID, psp.PackageID });
        // Configure relationships
        modelBuilder.Entity<PromotionServicePackage>()
            .HasOne(psp => psp.Promotion)
            .WithMany(p => p.PromotionServicePackages)
            .HasForeignKey(psp => psp.PromotionID);
        modelBuilder.Entity<PromotionServicePackage>()
            .HasOne(psp => psp.ServicePackage)
            .WithMany(sp => sp.PromotionServicePackages)
            .HasForeignKey(psp => psp.PackageID);

        modelBuilder.Entity<ServiceStaff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__ServiceS__96D4AAF701A58BAA");

            entity.Property(e => e.StaffId)
                .ValueGeneratedNever()
                .HasColumnName("StaffID");
            entity.Property(e => e.WorkingHours).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Staff).WithOne(p => p.ServiceStaff)
                .HasForeignKey<ServiceStaff>(d => d.StaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServiceSt__Staff__412EB0B6");
        });

        modelBuilder.Entity<Suppliers>(entity =>
        {
            entity.HasKey(e => e.SupplierId).HasName("PK__Supplier__4BE66694D6CEB32D");

            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.ContactInfo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CCAC9A56015F");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D10534A8D39B01").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PasswordHash).HasMaxLength(255);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Users__RoleID__3A81B327");
        });

        modelBuilder.Entity<Vehicles>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__Vehicles__476B54B2AFDF3EEC");

            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.Brand)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Garage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LicensePlate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Vehicles__Custom__46E78A0C");
        });

        modelBuilder.Entity<WarrantyClaims>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PK__Warranty__EF2E13BBED2E8BC6");

            entity.Property(e => e.ClaimId).HasColumnName("ClaimID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

            entity.HasOne(d => d.Part).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.PartId)
                .HasConstraintName("FK__WarrantyC__PartI__5EBF139D");

            entity.HasOne(d => d.Supplier).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK__WarrantyC__Suppl__5FB337D6");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}