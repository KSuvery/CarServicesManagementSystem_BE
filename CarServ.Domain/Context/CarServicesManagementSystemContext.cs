// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace CarServ.Domain.Entities;

public partial class CarServicesManagementSystemContext : DbContext
{
    public CarServicesManagementSystemContext()
    {
    }

    public CarServicesManagementSystemContext(DbContextOptions<CarServicesManagementSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointments> Appointments { get; set; }

    public virtual DbSet<CarTypes> CarTypes { get; set; }

    public virtual DbSet<Customers> Customers { get; set; }

    public virtual DbSet<InventoryManagers> InventoryManagers { get; set; }

    public virtual DbSet<Notifications> Notifications { get; set; }

    public virtual DbSet<OrderDetails> OrderDetails { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<PartPrices> PartPrices { get; set; }

    public virtual DbSet<Parts> Parts { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<Promotions> Promotions { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<ServiceHistory> ServiceHistory { get; set; }

    public virtual DbSet<ServicePackages> ServicePackages { get; set; }

    public virtual DbSet<ServiceParts> ServiceParts { get; set; }

    public virtual DbSet<ServiceProgress> ServiceProgress { get; set; }

    public virtual DbSet<ServiceStaff> ServiceStaff { get; set; }

    public virtual DbSet<Services> Services { get; set; }

    public virtual DbSet<Suppliers> Suppliers { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<Vehicles> Vehicles { get; set; }

    public virtual DbSet<WarrantyClaims> WarrantyClaims { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointments>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__Appointm__8ECDFCA25B8E7E42");

            entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");
            entity.Property(e => e.AppointmentDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Customer).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Appointme__Custo__6A30C649");

            entity.HasOne(d => d.Package).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.PackageId)
                .HasConstraintName("FK__Appointme__Packa__6B24EA82");

            entity.HasOne(d => d.Promotion).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.PromotionId)
                .HasConstraintName("FK__Appointme__Promo__6C190EBB");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK__Appointme__Vehic__6D0D32F4");
        });

        modelBuilder.Entity<CarTypes>(entity =>
        {
            entity.HasKey(e => e.CarTypeId).HasName("PK__CarTypes__2B2E84BD960F0F41");

            entity.Property(e => e.CarTypeId).HasColumnName("CarTypeID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Customers>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B82DD1BA22");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithOne(p => p.Customers)
                .HasForeignKey<Customers>(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Customers__Custo__6E01572D");
        });

        modelBuilder.Entity<InventoryManagers>(entity =>
        {
            entity.HasKey(e => e.ManagerId).HasName("PK__Inventor__3BA2AA81C16D50F5");

            entity.Property(e => e.ManagerId)
                .ValueGeneratedNever()
                .HasColumnName("ManagerID");

            entity.HasOne(d => d.Manager).WithOne(p => p.InventoryManagers)
                .HasForeignKey<InventoryManagers>(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Inventory__Manag__6EF57B66");
        });

        modelBuilder.Entity<Notifications>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E32EE2D6258");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.Message).HasColumnType("text");
            entity.Property(e => e.SentAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Notificat__UserI__6FE99F9F");
        });

        modelBuilder.Entity<OrderDetails>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("PK__OrderDet__D3B9D30CE9471D15");

            entity.Property(e => e.OrderDetailId).HasColumnName("OrderDetailID");
            entity.Property(e => e.LineTotal)
                .HasComputedColumnSql("([Quantity]*[UnitPrice])", true)
                .HasColumnType("decimal(21, 2)");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.Quantity).HasDefaultValue(1);
            entity.Property(e => e.UsedId).HasColumnName("UsedID");
            entity.Property(e => e.PartId).HasColumnName("PartID");            
            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__OrderDeta__Order__70DDC3D8");

            entity.HasOne(d => d.Package).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.PackageId)
                .HasConstraintName("FK__OrderDeta__Packa__71D1E811");

            entity.HasOne(d => d.Service).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__OrderDeta__Servi__72C60C4A");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__C3905BAF46F91766");

            entity.HasIndex(e => e.AppointmentId, "UQ__Orders__8ECDFCA3FA94364E").IsUnique();

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");

            entity.HasOne(d => d.Appointment).WithOne(p => p.Orders)
                .HasForeignKey<Orders>(d => d.AppointmentId)
                .HasConstraintName("FK__Orders__Appointm__73BA3083");

            entity.HasOne(d => d.Promotion).WithMany(p => p.Orders)
                .HasForeignKey(d => d.PromotionId)
                .HasConstraintName("FK__Orders__Promotio__74AE54BC");
        });

        modelBuilder.Entity<PartPrices>(entity =>
        {
            entity.HasKey(e => e.PriceId).HasName("PK__PartPric__4957584F0AD35D18");

            entity.Property(e => e.PriceId).HasColumnName("PriceID");
            entity.Property(e => e.EffectiveFrom)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Part).WithMany(p => p.PartPrices)
                .HasForeignKey(d => d.PartId)
                .HasConstraintName("FK__PartPrice__PartI__778AC167");
        });

        modelBuilder.Entity<Parts>(entity =>
        {
            entity.HasKey(e => e.PartId).HasName("PK__Parts__7C3F0D302B2E7AE6");

            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.PartName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A5885ECE850");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.PaidAt).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Appointment).WithMany(p => p.Payments)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK__Payments__Appoin__787EE5A0");

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Payments__OrderI__797309D9");
        });

        modelBuilder.Entity<Promotions>(entity =>
        {
            entity.HasKey(e => e.PromotionId).HasName("PK__Promotio__52C42F2FFB6B00C6");

            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE3A8F0CA27E");

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceHistory>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__ServiceH__C51BB0EA6F9C5086");

            entity.Property(e => e.ServiceId)
                .ValueGeneratedNever()
                .HasColumnName("ServiceID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.LaborHours).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Review).HasColumnType("text");
            entity.Property(e => e.ServiceDate).HasColumnType("datetime");
            entity.Property(e => e.StaffId).HasColumnName("StaffID");

            entity.HasOne(d => d.Service).WithOne(p => p.ServiceHistory)
                .HasForeignKey<ServiceHistory>(d => d.ServiceId)
                .HasConstraintName("FK__ServiceHi__Servi__7A672E12");

            entity.HasOne(d => d.Staff).WithMany(p => p.ServiceHistory)
                .HasForeignKey(d => d.StaffId)
                .HasConstraintName("FK__ServiceHi__Staff__7B5B524B");
        });

        modelBuilder.Entity<ServicePackages>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("PK__ServiceP__322035EC8849DC92");

            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasMany(d => d.Service).WithMany(p => p.Package)
                .UsingEntity<Dictionary<string, object>>(
                    "PackageServices",
                    r => r.HasOne<Services>().WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__PackageSe__Servi__76969D2E"),
                    l => l.HasOne<ServicePackages>().WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__PackageSe__Packa__75A278F5"),
                    j =>
                    {
                        j.HasKey("PackageId", "ServiceId").HasName("PK__PackageS__8E718EE2CE1F7480");
                        j.IndexerProperty<int>("PackageId").HasColumnName("PackageID");
                        j.IndexerProperty<int>("ServiceId").HasColumnName("ServiceID");
                    });
        });

        modelBuilder.Entity<ServiceParts>(entity =>
        {
            entity.HasKey(e => new { e.ServiceId, e.PartId }).HasName("PK__ServiceP__D2D84039FE299B29");

            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.PartId).HasColumnName("PartID");

            entity.HasOne(d => d.Part).WithMany(p => p.ServiceParts)
                .HasForeignKey(d => d.PartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServicePa__PartI__7C4F7684");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceParts)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServicePa__Servi__7D439ABD");
        });

        modelBuilder.Entity<ServiceProgress>(entity =>
        {
            entity.HasKey(e => e.ProgressId).HasName("PK__ServiceP__BAE29C8505E2039F");

            entity.Property(e => e.ProgressId).HasColumnName("ProgressID");
            entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Appointment).WithMany(p => p.ServiceProgress)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK__ServicePr__Appoi__7E37BEF6");
        });

        modelBuilder.Entity<ServiceStaff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__ServiceS__96D4AAF780C0D93D");

            entity.Property(e => e.StaffId)
                .ValueGeneratedNever()
                .HasColumnName("StaffID");
            entity.Property(e => e.WorkingHours).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Staff).WithOne(p => p.ServiceStaff)
                .HasForeignKey<ServiceStaff>(d => d.StaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServiceSt__Staff__7F2BE32F");
        });

        modelBuilder.Entity<Services>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Services__C51BB0EA8B85E219");

            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.EstimatedLaborHours).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Suppliers>(entity =>
        {
            entity.HasKey(e => e.SupplierId).HasName("PK__Supplier__4BE66694B473EA1C");

            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.ContactInfo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CCACE35D77BC");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D10534B4E11DB9").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PasswordHash).HasMaxLength(255);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Users__RoleID__00200768");
        });

        modelBuilder.Entity<Vehicles>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__Vehicles__476B54B25479A612");

            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.CarTypeId).HasColumnName("CarTypeID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.LicensePlate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Make)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CarType).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.CarTypeId)
                .HasConstraintName("FK__Vehicles__CarTyp__01142BA1");

            entity.HasOne(d => d.Customer).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Vehicles__Custom__02084FDA");
        });

        modelBuilder.Entity<WarrantyClaims>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PK__Warranty__EF2E13BB463D2C52");

            entity.Property(e => e.ClaimId).HasColumnName("ClaimID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

            entity.HasOne(d => d.Part).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.PartId)
                .HasConstraintName("FK__WarrantyC__PartI__02FC7413");

            entity.HasOne(d => d.Supplier).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK__WarrantyC__Suppl__03F0984C");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}